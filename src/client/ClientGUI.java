package client;

import messages.*;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;
import java.util.Vector;

public class ClientGUI {
    public ClientGUI(Client c) {
        client = c;
        sendButton.addActionListener(e -> {
            client.sendMessage(textArea1.getText());
            textArea1.setText("");
        });
    }

    public void onMessage(Message me) {
        switch (me.getType()) {
            case SERVER_USER_LOGIN -> {
                ServerUserName login = (ServerUserName) me.getMessage();
                client.requestUserList();
                TextArea.append("*** User " + login.name() + " joined us! ***\n");
            }
            case SERVER_USER_LOGOUT -> {
                ServerUserName login = (ServerUserName) me.getMessage();
                client.requestUserList();
                TextArea.append("*** User " + login.name() + " left us all alone... ***\n");
            }
            case SERVER_LIST_RESPONSE -> {
                ServerList serverList = (ServerList) me.getMessage();
                DefaultListModel<String> listModel = new DefaultListModel<>();
                for (var user : serverList.users()) {
                    listModel.addElement(user.name() + ": " + user.client());
                }
                list1.setModel(listModel);
            }
            case SERVER_MESSAGE -> {
                ServerMessage message = (ServerMessage) me.getMessage();
                TextArea.append(message.name() + ": " + message.message() + "\n");
            }
        }
    }

    public Container getContentPane() {
        return MainPanel;
    }

    private final Client client;
    private JPanel MainPanel;
    private JList<String> list1;
    private JTextArea TextArea;
    private JTextArea textArea1;
    private JButton sendButton;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new BorderLayout(0, 0));
        MainPanel.setMinimumSize(new Dimension(720, 480));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setPreferredSize(new Dimension(200, 100));
        MainPanel.add(panel1, BorderLayout.EAST);
        panel1.setBorder(BorderFactory.createTitledBorder(null, "Users", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, BorderLayout.CENTER);
        list1 = new JList();
        list1.setAutoscrolls(true);
        list1.setFocusable(false);
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        defaultListModel1.addElement("what");
        defaultListModel1.addElement("da");
        defaultListModel1.addElement("fuk");
        list1.setModel(defaultListModel1);
        scrollPane1.setViewportView(list1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        MainPanel.add(panel2, BorderLayout.CENTER);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Messages", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, panel2.getFont()), null));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        panel2.add(panel3, BorderLayout.CENTER);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel3.add(scrollPane2, BorderLayout.CENTER);
        TextArea = new JTextArea();
        TextArea.setBackground(new Color(-1));
        TextArea.setEditable(false);
        TextArea.setText("");
        scrollPane2.setViewportView(TextArea);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new BorderLayout(0, 0));
        panel3.add(panel4, BorderLayout.SOUTH);
        final JScrollPane scrollPane3 = new JScrollPane();
        panel4.add(scrollPane3, BorderLayout.CENTER);
        textArea1 = new JTextArea();
        textArea1.setRows(7);
        scrollPane3.setViewportView(textArea1);
        sendButton = new JButton();
        sendButton.setText("Send");
        panel4.add(sendButton, BorderLayout.EAST);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
